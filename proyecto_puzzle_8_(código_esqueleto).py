# -*- coding: utf-8 -*-
"""Proyecto Puzzle-8 (Código Esqueleto)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hM8Vt7bO-gaqsdbnmz5c3JfmLGd-uo8W

# Proyecto Puzzle-8

**Código esqueleto para el proyecto *Puzzle-8*** del Prof. Carlos Ogando para la asignatura Introducción a la IA en ITLA

**Integrantes del equipo:**
 
*( Introduzca en este espacio los integrantes del equipo, su correo y su matrícula)*
"""

"""
Código esqueleto para el proyecto Puzzle-8 del Prof. Carlos Ogando
para la asignatura Introducción a la IA en ITLA.
Python 3
"""

# Librerías

import queue as Q

import time

import resource

import math

# Clase que representa el Puzzle-n general

class PuzzleState(object):

    """docstring para PuzzleState"""

    def __init__(self, config, n, parent=None, action="Initial", cost=0):

        if n*n != len(config) or n < 2:

            raise Exception("the length of config is not correct!")

        self.n = n

        self.cost = cost

        self.parent = parent

        self.action = action

        self.dimension = n

        self.config = config

        self.children = []

        for i, item in enumerate(self.config):

            if item == 0:

                self.blank_row = i // self.n

                self.blank_col = i % self.n

                break

    def display(self):

        for i in range(self.n):

            line = []

            offset = i * self.n

            for j in range(self.n):

                line.append(self.config[offset + j])

            print(line)

    def move_left(self):

        if self.blank_col == 0:

            return None

        else:

            blank_index = self.blank_row * self.n + self.blank_col

            target = blank_index - 1

            new_config = list(self.config)

            new_config[blank_index], new_config[target] = new_config[target], new_config[blank_index]

            return PuzzleState(tuple(new_config), self.n, parent=self, action="Left", cost=self.cost + 1)

    def move_right(self):

        if self.blank_col == self.n - 1:

            return None

        else:

            blank_index = self.blank_row * self.n + self.blank_col

            target = blank_index + 1

            new_config = list(self.config)

            new_config[blank_index], new_config[target] = new_config[target], new_config[blank_index]

            return PuzzleState(tuple(new_config), self.n, parent=self, action="Right", cost=self.cost + 1)

    def move_up(self):

        if self.blank_row == 0:

            return None

        else:

            blank_index = self.blank_row * self.n + self.blank_col

            target = blank_index - self.n

            new_config = list(self.config)

            new_config[blank_index], new_config[target] = new_config[target], new_config[blank_index]

            return PuzzleState(tuple(new_config), self.n, parent=self, action="Up", cost=self.cost + 1)

    def move_down(self):

        if self.blank_row == self.n - 1:

            return None

        else:

            blank_index = self.blank_row * self.n + self.blank_col

            target = blank_index + self.n

            new_config = list(self.config)

            new_config[blank_index], new_config[target] = new_config[target], new_config[blank_index]

            return PuzzleState(tuple(new_config), self.n, parent=self, action="Down", cost=self.cost + 1)

    def expand(self):

        """Expandir el nodo"""

        # Añadir nodos hijos en orden UDLR (Up-Down-Left-Right)

        if len(self.children) == 0:

            up_child = self.move_up()

            if up_child is not None:

                self.children.append(up_child)

            down_child = self.move_down()

            if down_child is not None:

                self.children.append(down_child)

            left_child = self.move_left()

            if left_child is not None:

                self.children.append(left_child)

            right_child = self.move_right()

            if right_child is not None:

                self.children.append(right_child)

        return self.children

def writeOutput():

    """
    Función que escribe output.txt
    (Los estudiantes deben cambiar el método para que opere con los parametros necesarios).
    """

    ### SU CÓDIGO VA AQUÍ ###

def bfs_search(initial_state):

    """BFS search"""

    ### SU CÓDIGO VA AQUÍ ###

def dfs_search(initial_state):

    """DFS search"""

    ### SU CÓDIGO VA AQUÍ ###

def A_star_search(initial_state):

    """A * search"""

    ### SU CÓDIGO VA AQUÍ ###

def calculate_total_cost(state):

    """calculate the total estimated cost of a state"""

    ### SU CÓDIGO VA AQUÍ ###

def calculate_manhattan_dist(idx, value, n):

    """calculate the manhattan distance of a tile"""

    ### SU CÓDIGO VA AQUÍ ###

def test_goal(puzzle_state):

    """test the state is the goal state or not"""

    ### SU CÓDIGO VA AQUÍ ###

# Función Main que leerá las entradas y llamará el algoritmo correspondiente

def main():

    query = input().split(" ")

    sm = query[0].lower()

    begin_state = query[1].split(",")

    begin_state = tuple(map(int, begin_state))

    size = int(math.sqrt(len(begin_state)))

    hard_state = PuzzleState(begin_state, size)

    if sm == "bfs":

        bfs_search(hard_state)

    elif sm == "dfs":

        dfs_search(hard_state)

    elif sm == "ast":

        A_star_search(hard_state)

    else:

        print("Introduzca comandos de argumentos válidos !")

if __name__ == '__main__':

    main()